generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id        String    @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  role      String   @default("user")
  roles     String[] @default(["user"])
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String    @id @default(uuid())
  codCus    String   @unique
  nameCus   String   @unique
  emailCus  String?
  domcomer  String?
  cuit      String?
  coniva    String?
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id            String    @id @default(uuid())
  codSup    String   @unique
  name      String   @unique
  email     String?
  domcomer  String?
  cuit      String?
  coniva    String?
  products   Product[]
  updatedAt DateTime @updatedAt
}

model Valuee {
  id            String    @id @default(uuid())
  codVal        String   @unique
  desVal        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model StateOrd {
  id            String    @id @default(uuid())
  name          String   
  note          String   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Encargado {
  id            String    @id @default(uuid())
  codEnc        String   @unique
  name          String   @unique
  email         String?   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comprobante {
  id            String    @id @default(uuid())
  codComC    String?
  nameCom    String?
  claCom     String?
  isHaber    Boolean       @default(true)
  noDisc     Boolean       @default(true)
  toDisc     Boolean       @default(false)
  itDisc     Boolean       @default(false)
  interno    Boolean       @default(false)
  numInt     Int?
  
  codConId    String?         // ðŸ‘ˆ Debe ser STRING para coincidir con el UUID del Configuration.id
  codCon      Configuration?  @relation(fields: [codConId], references: [id])
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n 
  
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([codComC, codConId])
}

model Parte {
  id        String   @id @default(uuid())
  codPar    String   @unique
  name      String   @unique
  email     String?
  domcomer  String?
  cuit      String?
  coniva    String?
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Configuration {
  id            String    @id @default(uuid())
  codCon      String   @unique
  name        String   @unique
  domcomer    String?
  cuit        String?
  coniva      String?
  ib          String?
  feciniact   String?   // mejor que string â†’ Prisma/Postgres maneja fechas nativas
  numIntRem   Int      @default(0)
  numIntRec   Int      @default(0)
  numIntOdp   Int      @default(0)
  numIntCaj   Int      @default(0)
  numIntMov   Int      @default(0)
  numIntCli   Int      @default(0)
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem
  comprobantes Comprobante[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/////
model Instrumento {
  id          String      @id @default(uuid())
  codIns      String
  name        String
  orderItems OrderItem[]
  order  Order[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}



model Product {
  id          String   @id @default(uuid())
  codPro      String
  codigoPro   String
  title       String
  medPro      String
  slug        String?
  image       String?
  images      String[]
  image1      String?
  image2      String?
  image3      String?
  brand       String?
  category    String?
  id_config   String?
  // supplier    String?
  id_category String?
  description String
  price       Float?
  priceBuy    Float?
  inStock     Float?
  minStock    Float?
  porIva      Float?
  rating      Float?
  numReviews  Int?
  tags        String[]
  type        ProductType?
  gender      Gender?
  sizes       String[]
  reviews     Review[]
  orderItems  OrderItem[]   // ðŸ‘ˆ RelaciÃ³n con OrderItem

  supplierId    String?         // ðŸ‘ˆ Debe ser STRING para coincidir con el UUID del Configuration.id
  supplier      Supplier?   @relation(fields: [supplierId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@unique([codigoPro, id_config])
}

model Review {
  id        String  @id @default(uuid())
  productId String
  name      String?
  comment   String?
  rating    Float?
  product   Product @relation(fields: [productId], references: [id])
}

enum ProductType {
  shirts
  pants
  hoodies
  hats
}

enum Gender {
  men
  women
  kid
  unisex
}


model OrderItem {
  id          String   @id @default(uuid())
  slug        String?
  title       String
  medPro      String
  quantity    Int
  image       String?
  price       Float
  size        String?
  porIva      Int
  venDat      DateTime?
  observ      String?
  terminado   Boolean?
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  instrumento Instrumento? @relation(fields: [instrumentoId], references: [id])
  instrumentoId String?
  order Order? @relation(fields: [orderId], references: [id])
  orderId String?
}


model Order {
  id             String       @id @default(uuid())
  orderItems     OrderItem[]  // relaciÃ³n 1:N con OrderItem
  shippingAddress ShippingAddress[]
  paymentMethod  String?
  paymentResult  PaymentResult?

  numberOfItems  Int?
  subTotal       Float?
  shippingPrice  Float?
  tax            Float?
  total          Float?
  totalBuy       Float?

  id_client      String?      // relaciÃ³n con Customer
  customer     Customer?   @relation(fields: [id_client], references: [id])
  id_parte       String?      // relaciÃ³n con Parte
  parte        Parte?   @relation(fields: [id_parte], references: [id])
  id_instru      String?      // relaciÃ³n con Instrumento
  instrumento  Instrumento?   @relation(fields: [id_instru], references: [id])
  id_config      String?
  configuration  Configuration?   @relation(fields: [id_config], references: [id])
  id_config2     String?
  codConNum      String?
  codCom         String?
  comprobante  Comprobante?   @relation(fields: [codCom], references: [id])

  libNum         Int?
  folNum         Int?
  asiNum         Int?
  asiDat         DateTime?
  escNum         Int?
  asieNum        Int?
  asieDat        DateTime?

  terminado      Boolean      @default(false)

  isHaber        Boolean?
  user           String?
  user1  User?   @relation(fields: [user], references: [id])
  id_delivery    String?
  id_address     String?
  supplier       String?

  isPaid         Boolean      @default(false)
  paidAt         DateTime?
  isDelivered    Boolean      @default(false)
  deliveredAt    DateTime?

  remNum         Int?
  remDat         DateTime?
  dueDat         DateTime?
  movpvNum       Int?
  movpvDat       DateTime?
  invNum         Int?
  invDat         DateTime?
  recNum         Int?
  recDat         DateTime?

  desVal         String?
  ordNum         Int?
  notes          String?
  salbuy         String?
  pedcotNum      Int?
  pedcotDat      DateTime?
  cotNum         Int?
  cotDat         DateTime?
  ordYes         String?
  staOrd         String?
  status         String?

  lat            Float?
  lng            Float?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ShippingAddress {
  id             String  @id @default(uuid())
  fullName       String?
  firstName      String?
  lastName       String?
  address        String?
  address2       String?
  city           String?
  postalCode     String?
  zip            String?
  country        String?
  cuit           String?
  phone          String?
  orderId        String  @unique
  order          Order   @relation(fields: [orderId], references: [id])
}

model PaymentResult {
  id            String   @id @default(uuid())
  status        String?
  update_time   String?
  email_address String?
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
}
